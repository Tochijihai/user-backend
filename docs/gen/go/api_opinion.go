/*
 * Tochijihai User API
 *
 * 都知事杯のユーザー向けAPIです。
 *
 * API version: 0.1.9
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OpinionAPIController binds http requests to an api service and writes the service results to the http response
type OpinionAPIController struct {
	service      OpinionAPIServicer
	errorHandler ErrorHandler
}

// OpinionAPIOption for how the controller is set up.
type OpinionAPIOption func(*OpinionAPIController)

// WithOpinionAPIErrorHandler inject ErrorHandler into controller
func WithOpinionAPIErrorHandler(h ErrorHandler) OpinionAPIOption {
	return func(c *OpinionAPIController) {
		c.errorHandler = h
	}
}

// NewOpinionAPIController creates a default api controller
func NewOpinionAPIController(s OpinionAPIServicer, opts ...OpinionAPIOption) Router {
	controller := &OpinionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OpinionAPIController
func (c *OpinionAPIController) Routes() Routes {
	return Routes{

		"GetUserOpinions": Route{
			strings.ToUpper("Get"),
			"/user/opinions",
			c.GetUserOpinions,
		},
		"PostUserOpinions": Route{
			strings.ToUpper("Post"),
			"/user/opinions",
			c.PostUserOpinions,
		},
		"PostUserComments": Route{
			strings.ToUpper("Post"),
			"/user/opinions/{opinionId}/comments",
			c.PostUserComments,
		},
		"GetUserComments": Route{
			strings.ToUpper("Get"),
			"/user/opinions/{opinionId}/comments",
			c.GetUserComments,
		},
		"PutOpinionReactions": Route{
			strings.ToUpper("Put"),
			"/user/opinions/{opinionId}/reactions",
			c.PutOpinionReactions,
		},
	}
}

// GetUserOpinions - ユーザー意見取得API
func (c *OpinionAPIController) GetUserOpinions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUserOpinions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUserComments - コメント投稿API
func (c *OpinionAPIController) PostUserComments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	opinionIdParam := params["opinionId"]
	if opinionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"opinionId"}, nil)
		return
	}
	commentRequestParam := CommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequestRequired(commentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommentRequestConstraints(commentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostUserComments(r.Context(), opinionIdParam, commentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserOpinions - ユーザーコメント取得API
func (c *OpinionAPIController) GetUserComments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	opinionIdParam := params["opinionId"]
	if opinionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"opinionId"}, nil)
		return
	}
	result, err := c.service.GetUserComments(r.Context(), opinionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUserOpinions - 意見投稿API
func (c *OpinionAPIController) PostUserOpinions(w http.ResponseWriter, r *http.Request) {
	opinionRequestParam := OpinionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&opinionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOpinionRequestRequired(opinionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOpinionRequestConstraints(opinionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostUserOpinions(r.Context(), opinionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutOpinionReactions - リアクションAPI
func (c *OpinionAPIController) PutOpinionReactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	opinionIdParam := params["opinionId"]
	if opinionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"opinionId"}, nil)
		return
	}
	reactionRequestParam := ReactionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&reactionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReactionRequestRequired(reactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReactionRequestConstraints(reactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutOpinionReactions(r.Context(), opinionIdParam, reactionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
